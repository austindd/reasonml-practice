// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");

function trace1(a) {
  console.log(a);
  return a;
}

function trace2(a, b) {
  console.log(a, b);
  return Curry._1(b, a);
}

function trace3(a, b, c) {
  console.log(a, b, c);
  return Curry._1(c, Curry._1(b, a));
}

function lift1(v, a) {
  return Curry._1(a, v);
}

function lift2(v, a, b) {
  return /* tuple */[
          Curry._1(a, v),
          Curry._1(b, v)
        ];
}

function lift3(v, a, b, c) {
  return /* tuple */[
          Curry._1(a, v),
          Curry._1(b, v),
          Curry._1(c, v)
        ];
}

function lift4(v, a, b, c, d) {
  return /* tuple */[
          Curry._1(a, v),
          Curry._1(b, v),
          Curry._1(c, v),
          Curry._1(d, v)
        ];
}

function lift5(v, a, b, c, d, e) {
  return /* tuple */[
          Curry._1(a, v),
          Curry._1(b, v),
          Curry._1(c, v),
          Curry._1(d, v),
          Curry._1(e, v)
        ];
}

function lift6(v, a, b, c, d, e, f) {
  return /* tuple */[
          Curry._1(a, v),
          Curry._1(b, v),
          Curry._1(c, v),
          Curry._1(d, v),
          Curry._1(e, v),
          Curry._1(f, v)
        ];
}

function apply1(v, a) {
  return Curry._1(v, a);
}

function apply2(v, a, b) {
  return /* tuple */[
          Curry._1(v, a),
          Curry._1(v, b)
        ];
}

function apply3(v, a, b, c) {
  return /* tuple */[
          Curry._1(v, a),
          Curry._1(v, b),
          Curry._1(v, c)
        ];
}

function apply4(v, a, b, c, d) {
  return /* tuple */[
          Curry._1(v, a),
          Curry._1(v, b),
          Curry._1(v, c),
          Curry._1(v, d)
        ];
}

function apply5(v, a, b, c, d, e) {
  return /* tuple */[
          Curry._1(v, a),
          Curry._1(v, b),
          Curry._1(v, c),
          Curry._1(v, d),
          Curry._1(v, e)
        ];
}

function apply6(v, a, b, c, d, e, f) {
  return /* tuple */[
          Curry._1(v, a),
          Curry._1(v, b),
          Curry._1(v, c),
          Curry._1(v, d),
          Curry._1(v, e),
          Curry._1(v, f)
        ];
}

function left(a, b) {
  return a;
}

function right(a, b) {
  return b;
}

function b1(a, b, c, d) {
  return Curry._1(a, Curry._2(b, c, d));
}

function flip(a, b) {
  return /* tuple */[
          b,
          a
        ];
}

exports.trace1 = trace1;
exports.trace2 = trace2;
exports.trace3 = trace3;
exports.lift1 = lift1;
exports.lift2 = lift2;
exports.lift3 = lift3;
exports.lift4 = lift4;
exports.lift5 = lift5;
exports.lift6 = lift6;
exports.apply1 = apply1;
exports.apply2 = apply2;
exports.apply3 = apply3;
exports.apply4 = apply4;
exports.apply5 = apply5;
exports.apply6 = apply6;
exports.left = left;
exports.right = right;
exports.b1 = b1;
exports.flip = flip;
/* No side effect */
