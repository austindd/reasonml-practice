// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");

function $less$less(f, x) {
  return Curry._1(f, x);
}

function $less$less$less(f, g, x) {
  return Curry._1(f, Curry._1(g, x));
}

function evaluate(condition, expression) {
  var $$eval = function (expr) {
    return evaluate(condition, expr);
  };
  switch (expression.tag | 0) {
    case 0 : 
        return Curry._1(condition, expression[0]);
    case 1 : 
        return expression[0];
    case 2 : 
    case 3 : 
        return List.for_all($$eval, expression[0]);
    case 4 : 
        return !evaluate(condition, expression[0]);
    
  }
}

var Play = /* module */[
  /* << */$less$less,
  /* <<< */$less$less$less,
  /* evaluate */evaluate
];

function validRGB(rgbColor) {
  if (rgbColor.tag) {
    return undefined;
  } else {
    var c = rgbColor[2];
    var b = rgbColor[1];
    var a = rgbColor[0];
    var match = a >= 0 && a <= 255 && b >= 0 && b <= 255 && c >= 0 && c <= 255;
    if (match) {
      return /* RGB */Block.__(0, [
                a,
                b,
                c
              ]);
    } else {
      return undefined;
    }
  }
}

function validRGBA(rgbaColor) {
  if (rgbaColor.tag === 1) {
    var d = rgbaColor[3];
    var c = rgbaColor[2];
    var b = rgbaColor[1];
    var a = rgbaColor[0];
    var match = a >= 0 && a <= 255 && b >= 0 && b <= 255 && c >= 0 && c <= 255 && d >= 0 && d <= 255;
    if (match) {
      return /* RGBA */Block.__(1, [
                a,
                b,
                c,
                d
              ]);
    } else {
      return undefined;
    }
  }
  
}

function validColor(color) {
  switch (color.tag | 0) {
    case 0 : 
        return validRGB(/* RGB */Block.__(0, [
                      color[0],
                      color[1],
                      color[2]
                    ]));
    case 1 : 
        return validRGBA(/* RGBA */Block.__(1, [
                      color[0],
                      color[1],
                      color[2],
                      color[3]
                    ]));
    case 2 : 
    case 3 : 
        return undefined;
    
  }
}

var myColor = /* RGB */Block.__(0, [
    2,
    68,
    210
  ]);

exports.Play = Play;
exports.validRGB = validRGB;
exports.validRGBA = validRGBA;
exports.validColor = validColor;
exports.myColor = myColor;
/* No side effect */
