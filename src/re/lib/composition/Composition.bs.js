// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");

function trace1(a) {
  console.log(a);
  return a;
}

function trace2(a, b) {
  console.log(a, b);
  return Curry._1(b, a);
}

function trace3(a, b, c) {
  console.log(a, b, c);
  return Curry._1(c, Curry._1(b, a));
}

function trace4(a, b, c, d) {
  console.log(a, b, c, d);
  return Curry._1(d, Curry._1(c, Curry._1(b, a)));
}

function traceMany(args) {
  Block.spliceApply(console.log, [args]);
  return args;
}

function lift1(v, a) {
  return Curry._1(a, v);
}

function lift2(v, a, b) {
  return /* tuple */[
          Curry._1(a, v),
          Curry._1(b, v)
        ];
}

function lift3(v, a, b, c) {
  return /* tuple */[
          Curry._1(a, v),
          Curry._1(b, v),
          Curry._1(c, v)
        ];
}

function lift4(v, a, b, c, d) {
  return /* tuple */[
          Curry._1(a, v),
          Curry._1(b, v),
          Curry._1(c, v),
          Curry._1(d, v)
        ];
}

function lift5(v, a, b, c, d, e) {
  return /* tuple */[
          Curry._1(a, v),
          Curry._1(b, v),
          Curry._1(c, v),
          Curry._1(d, v),
          Curry._1(e, v)
        ];
}

function lift6(v, a, b, c, d, e, f) {
  return /* tuple */[
          Curry._1(a, v),
          Curry._1(b, v),
          Curry._1(c, v),
          Curry._1(d, v),
          Curry._1(e, v),
          Curry._1(f, v)
        ];
}

function lift7(v, a, b, c, d, e, f, g) {
  return /* tuple */[
          Curry._1(a, v),
          Curry._1(b, v),
          Curry._1(c, v),
          Curry._1(d, v),
          Curry._1(e, v),
          Curry._1(f, v),
          Curry._1(g, v)
        ];
}

function lift8(v, a, b, c, d, e, f, g, h) {
  return /* tuple */[
          Curry._1(a, v),
          Curry._1(b, v),
          Curry._1(c, v),
          Curry._1(d, v),
          Curry._1(e, v),
          Curry._1(f, v),
          Curry._1(g, v),
          Curry._1(h, v)
        ];
}

function lift9(v, a, b, c, d, e, f, g, h, i) {
  return /* tuple */[
          Curry._1(a, v),
          Curry._1(b, v),
          Curry._1(c, v),
          Curry._1(d, v),
          Curry._1(e, v),
          Curry._1(f, v),
          Curry._1(g, v),
          Curry._1(h, v),
          Curry._1(i, v)
        ];
}

function lift10(v, a, b, c, d, e, f, g, h, i, j) {
  return /* tuple */[
          Curry._1(a, v),
          Curry._1(b, v),
          Curry._1(c, v),
          Curry._1(d, v),
          Curry._1(e, v),
          Curry._1(f, v),
          Curry._1(g, v),
          Curry._1(h, v),
          Curry._1(i, v),
          Curry._1(j, v)
        ];
}

function apply1(v, a) {
  return Curry._1(v, a);
}

function apply2(v, a, b) {
  return /* tuple */[
          Curry._1(v, a),
          Curry._1(v, b)
        ];
}

function apply3(v, a, b, c) {
  return /* tuple */[
          Curry._1(v, a),
          Curry._1(v, b),
          Curry._1(v, c)
        ];
}

function apply4(v, a, b, c, d) {
  return /* tuple */[
          Curry._1(v, a),
          Curry._1(v, b),
          Curry._1(v, c),
          Curry._1(v, d)
        ];
}

function apply5(v, a, b, c, d, e) {
  return /* tuple */[
          Curry._1(v, a),
          Curry._1(v, b),
          Curry._1(v, c),
          Curry._1(v, d),
          Curry._1(v, e)
        ];
}

function apply6(v, a, b, c, d, e, f) {
  return /* tuple */[
          Curry._1(v, a),
          Curry._1(v, b),
          Curry._1(v, c),
          Curry._1(v, d),
          Curry._1(v, e),
          Curry._1(v, f)
        ];
}

function apply7(v, a, b, c, d, e, f, g) {
  return /* tuple */[
          Curry._1(v, a),
          Curry._1(v, b),
          Curry._1(v, c),
          Curry._1(v, d),
          Curry._1(v, e),
          Curry._1(v, f),
          Curry._1(v, g)
        ];
}

function apply8(v, a, b, c, d, e, f, g, h) {
  return /* tuple */[
          Curry._1(v, a),
          Curry._1(v, b),
          Curry._1(v, c),
          Curry._1(v, d),
          Curry._1(v, e),
          Curry._1(v, f),
          Curry._1(v, g),
          Curry._1(v, h)
        ];
}

function apply9(v, a, b, c, d, e, f, g, h, i) {
  return /* tuple */[
          Curry._1(v, a),
          Curry._1(v, b),
          Curry._1(v, c),
          Curry._1(v, d),
          Curry._1(v, e),
          Curry._1(v, f),
          Curry._1(v, g),
          Curry._1(v, h),
          Curry._1(v, i)
        ];
}

function apply10(v, a, b, c, d, e, f, g, h, i, j) {
  return /* tuple */[
          Curry._1(v, a),
          Curry._1(v, b),
          Curry._1(v, c),
          Curry._1(v, d),
          Curry._1(v, e),
          Curry._1(v, f),
          Curry._1(v, g),
          Curry._1(v, h),
          Curry._1(v, i),
          Curry._1(v, j)
        ];
}

function left(a, param) {
  return a;
}

function right(param, b) {
  return b;
}

function flip(a, b) {
  return /* tuple */[
          b,
          a
        ];
}

function b1(a, b, c, d) {
  return Curry._1(a, Curry._2(b, c, d));
}

function bindOption(opt, fn) {
  if (opt !== undefined) {
    return Caml_option.some(Curry._1(fn, Caml_option.valFromOption(opt)));
  }
  
}

function liftToOption(value, fn) {
  return Curry._1(fn, Caml_option.some(value));
}

function liftNone(param) {
  return undefined;
}

function joinOption(opt, fn) {
  if (opt !== undefined) {
    return Curry._1(fn, Caml_option.valFromOption(opt));
  }
  
}

exports.trace1 = trace1;
exports.trace2 = trace2;
exports.trace3 = trace3;
exports.trace4 = trace4;
exports.traceMany = traceMany;
exports.lift1 = lift1;
exports.lift2 = lift2;
exports.lift3 = lift3;
exports.lift4 = lift4;
exports.lift5 = lift5;
exports.lift6 = lift6;
exports.lift7 = lift7;
exports.lift8 = lift8;
exports.lift9 = lift9;
exports.lift10 = lift10;
exports.apply1 = apply1;
exports.apply2 = apply2;
exports.apply3 = apply3;
exports.apply4 = apply4;
exports.apply5 = apply5;
exports.apply6 = apply6;
exports.apply7 = apply7;
exports.apply8 = apply8;
exports.apply9 = apply9;
exports.apply10 = apply10;
exports.left = left;
exports.right = right;
exports.flip = flip;
exports.b1 = b1;
exports.bindOption = bindOption;
exports.liftToOption = liftToOption;
exports.liftNone = liftNone;
exports.joinOption = joinOption;
/* No side effect */
